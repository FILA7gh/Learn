"""

Инкапсуляция — это один из основных принципов объектно-ориентированного программирования (ООП),
который заключается в объединении данных и методов, работающих с этими данными, внутри одного класса и
сокрытии деталей реализации от внешнего мира. Инкапсуляция обеспечивает контроль над доступом к данным
и позволяет управлять изменениями в коде более эффективно.


Основные концепции инкапсуляции

    Сокрытие данных (информация скрыта):

        Данные внутри класса (атрибуты) скрыты от внешнего доступа и могут быть доступны только через методы класса
        (также называемые функциями-членами или методами доступа).


    Методы доступа:

        Методы, предоставляющие доступ к скрытым данным, называются геттерами (для получения значений атрибутов)
        и сеттерами (для установки значений атрибутов).


    Приватные и публичные члены класса:

        Приватные члены — это члены класса, которые не могут быть доступны напрямую извне.
        В Python они обозначаются двойным подчеркиванием перед именем (например, __private).
        Публичные члены — это члены класса, которые могут быть доступны извне. Они обозначаются без подчеркиваний
        или с одним подчеркиванием (например, _protected).



Пример инкапсуляции в Python

    Рассмотрим пример, чтобы понять, как работает инкапсуляция в Python:

    class BankAccount:

        def __init__(self, account_number, balance):
            self.__account_number = account_number  # Приватный атрибут
            self.__balance = balance                # Приватный атрибут

        # Геттер для account_number
        def get_account_number(self):
            return self.__account_number

        # Геттер для balance
        def get_balance(self):
            return self.__balance

        # Сеттер для balance
        def set_balance(self, amount):
            if amount >= 0:
                self.__balance = amount
            else:
                print("Ошибка: баланс не может быть отрицательным")

        # Метод для пополнения баланса
        def deposit(self, amount):
            if amount > 0:
                self.__balance += amount
                print(f"Баланс пополнен на {amount}. Текущий баланс: {self.__balance}")
            else:
                print("Ошибка: сумма пополнения должна быть положительной")

        # Метод для снятия средств
        def withdraw(self, amount):
            if 0 < amount <= self.__balance:
                self.__balance -= amount
                print(f"Снято {amount}. Текущий баланс: {self.__balance}")
            else:
                print("Ошибка: недостаточно средств или неправильная сумма")

    # Использование класса BankAccount
    account = BankAccount("123456789", 1000)
    print(account.get_account_number())  # Вывод: 123456789
    print(account.get_balance())         # Вывод: 1000

    account.deposit(500)                 # Вывод: Баланс пополнен на 500. Текущий баланс: 1500
    account.withdraw(200)                # Вывод: Снято 200. Текущий баланс: 1300
    account.set_balance(2000)            # Установка нового баланса
    print(account.get_balance())         # Вывод: 2000

    account.__balance = -1000            # Попытка изменить приватный атрибут извне (не сработает)
    print(account.get_balance())         # Вывод: 2000


Преимущества инкапсуляции

    Контроль над доступом к данным:

        Инкапсуляция позволяет контролировать доступ к атрибутам объекта, предотвращая их некорректное использование.


    Повышение безопасности данных:

        Скрытие данных уменьшает вероятность случайных изменений и ошибок,
        обеспечивая целостность и консистентность данных.


    Упрощение сопровождения и модификации кода:

        Изменения в реализации класса могут быть сделаны без влияния на код, использующий этот класс.
        Интерфейс класса остается стабильным, а реализация может изменяться.


    Сокрытие деталей реализации:

        Инкапсуляция позволяет скрыть сложные детали реализации и предоставлять пользователю
        только необходимый интерфейс для взаимодействия с объектом.



Заключение

    Инкапсуляция является важным аспектом объектно-ориентированного программирования,
    обеспечивающим контроль над доступом к данным и защиту данных от некорректного использования.
    Она помогает создать более устойчивый и управляемый код, упрощая процесс разработки и сопровождения программных систем.
    Использование инкапсуляции позволяет разработчикам концентрироваться на логике работы программы,
    не беспокоясь о внутренних деталях реализации объектов.


"""