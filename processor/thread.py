"""


Поток (thread) — это наименьшая единица выполнения внутри процесса операционной системы.


Вот несколько ключевых аспектов потоков:

    Многозадачность:

        Потоки позволяют программам выполнять несколько задач параллельно в рамках одного процесса.
        Например, веб-сервер может использовать потоки для обработки нескольких запросов одновременно.


    Ресурсы:

        Потоки внутри одного процесса разделяют общие ресурсы, такие как память и файлы.
        Это позволяет им обмениваться данными и работать с общими объектами.


    Управление:

        Управление потоками обычно осуществляется операционной системой.
        Она отвечает за распределение процессорного времени между потоками,
        синхронизацию доступа к ресурсам и обеспечение безопасности выполнения.


    Виды потоков:

        Существует два основных типа потоков: пользовательские (user threads) и потоки ядра (kernel threads).
        Пользовательские потоки управляются библиотекой потоков в рамках процесса,
        в то время как потоки ядра управляются самой операционной системой и имеют прямой доступ к ядрам процессора.


    Планирование:

        Операционная система решает, какие потоки получают доступ к процессору и на какой промежуток времени.
        Этот процесс называется планированием потоков.


    Синхронизация:

        Потоки могут работать с общими данными и ресурсами, что может привести к состоянию гонки
        и другим проблемам. Для обеспечения безопасности доступа к общим ресурсам используются механизмы синхронизации,
        такие как мьютексы, семафоры и условные переменные.


    Процессорное время:

        Операционная система распределяет процессорное время между потоками.
        Каждый поток имеет свой собственный стек вызовов и контекст выполнения.



Потоки являются мощным инструментом для создания многозадачных программ, которые могут эффективно
использовать ресурсы компьютера и обеспечивать отзывчивость пользовательского интерфейса.
Они позволяют программам выполнять одновременно несколько задач и обрабатывать асинхронные события.



"""