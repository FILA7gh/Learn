"""

Сборщик мусора (Garbage Collector, GC) — это компонент системы управления памятью, который автоматически
освобождает память, занятую объектами, которые больше не используются в программе.
В Python сборка мусора помогает управлять памятью, избегая утечек памяти и снижая вероятность ошибок,
связанных с ручным управлением памятью.


Основные принципы работы сборщика мусора в Python

    Счетчик ссылок (Reference Counting):

        Каждый объект в Python имеет счетчик ссылок, который отслеживает, сколько раз объект используется.
        Когда счетчик ссылок объекта становится равным нулю, память, занятую объектом, освобождается.

        Пример:

            a = [1, 2, 3]  # Создание объекта, счетчик ссылок = 1
            b = a          # Счетчик ссылок увеличивается до 2
            del a          # Счетчик ссылок уменьшается до 1
            del b          # Счетчик ссылок уменьшается до 0, объект удаляется


    Обнаружение циклических ссылок (Cycle Detection):

        В дополнение к счетчику ссылок Python использует механизм для обнаружения и удаления циклических ссылок.
        Циклические ссылки возникают, когда объекты ссылаются друг на друга, образуя замкнутую цепочку,
        что не позволяет счетчику ссылок достичь нуля.

        Пример:

            class Node:
                def __init__(self, value):
                    self.value = value
                    self.next = None

            a = Node(1)
            b = Node(2)
            a.next = b
            b.next = a  # Создание цикла

            del a
            del b
            # Сборщик мусора Python обнаружит цикл и удалит объекты


    Поколения (Generations):

        Сборщик мусора в Python использует генерационную модель, которая делит объекты на три поколения:
        молодое, среднее и старое. Молодые объекты чаще проверяются на необходимость удаления,
        чем старые, поскольку предполагается, что большинство объектов быстро становятся неиспользуемыми.
        Объекты, которые пережили несколько сборок мусора, перемещаются в более старшие поколения.



Взаимодействие со сборщиком мусора

    Модуль gc в Python предоставляет инструменты для управления сборщиком мусора,
    включая возможность явно вызывать сборку мусора и настраивать его параметры.
    Основные функции модуля gc


    Включение и отключение сборщика мусора:

        import gc
        gc.enable()   # Включить сборщик мусора
        gc.disable()  # Отключить сборщик мусора


        Явный вызов сборщика мусора:

            gc.collect()  # Явный вызов сборщика мусора


        Настройка порогов сборки мусора:

            Пороги определяют, как часто сборщик мусора будет проверять поколения
            на наличие объектов, которые можно удалить.

            gc.set_threshold(700, 10, 10)


        Получение информации о сборке мусора:

            Получение информации о текущих порогах и статистике сборки мусора.

            print(gc.get_count())       # Получить текущее количество объектов в каждом поколении
            print(gc.get_threshold())   # Получить текущие пороги для поколений


Пример использования модуля gc

    import gc

    # Включение сборщика мусора
    gc.enable()

    # Создание объектов и циклической ссылки
    class Node:
        def __init__(self, value):
            self.value = value
            self.next = None

    a = Node(1)
    b = Node(2)
    a.next = b
    b.next = a

    # Удаление ссылок
    del a
    del b

    # Вызов сборщика мусора для удаления циклических ссылок
    gc.collect()

    # Получение информации о сборке мусора
    print(gc.get_count())
    print(gc.get_threshold())



Заключение

    Сборщик мусора в Python автоматизирует управление памятью, освобождая разработчиков от необходимости
    вручную управлять выделением и освобождением памяти. Он использует комбинацию счетчика ссылок и
    алгоритмов обнаружения циклических ссылок, а также генерационную модель для эффективного управления памятью.
    Использование модуля gc позволяет управлять поведением сборщика мусора и получать информацию о его работе,
    что может быть полезно для оптимизации производительности приложений.


"""